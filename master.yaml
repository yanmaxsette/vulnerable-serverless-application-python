AWSTemplateFormatVersion: 2010-09-09

Description: Anti Malware Usage Example

Parameters:
  C1API:
    Type: String
    NoEcho: true
    Description: Enter your Cloud One API Key
  Endpoint:
    Default: 'antimalware.us-1.cloudone.trendmicro.com:443'
    Description: Trend Endpoint.
    Type: String
  S3BucketName:
    Description: S3 bucket name containing the python.zip file
    Type: String
  S3Key:
    Default: 'python.zip'
    Description: zip file name
    Type: String

Resources:
  c1api:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: C1 API KEY
      SecretString: !Sub '{"c1apikey":"${C1API}"}'
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'false'
        BlockPublicPolicy: 'false'
        IgnorePublicAcls: 'false'
        RestrictPublicBuckets: 'false'
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket

  LambdaLibLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleArchitectures:
        - arm64
        - x86_64
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3Key
      Description: Libs
      LayerName: !Join ["-",[!Ref AWS::StackName, "lib-layer"]]

  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "ApplicationSecurity-DEMO"
      Description: "API Gateway for a sample app using Application Security"
      BinaryMediaTypes:
      - "multipart/form-data"

  MfuAPIResource:
    Type: "AWS::ApiGateway::Resource"
    DependsOn:
      - "ApiGateway"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref "ApiGateway"
      PathPart: mfu

  MfuApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn:
      - "ApiGateway"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "MfuLambdaFunction.Arn"
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: '200'
      ResourceId: !Ref "MfuAPIResource"
      RestApiId: !Ref "ApiGateway"

  ApiGatewayResponse:
    Type: "AWS::ApiGateway::GatewayResponse"
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseTemplates:
        "text/html": "<body><h2 style='width:100%;margin:0;display:flex; justify-content:center;background-color:white;color:black;'>Your request has been blocked</h2><p style='width:100%;margin:0;display:flex; justify-content:center;background-color:white;color:black;'>We&#39;ve detected unusual activity with your attempt to access the service.</p></body>"
      RestApiId: !Ref ApiGateway
      ResponseType: INTEGRATION_FAILURE
      StatusCode: "504"

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "MfuApiGatewayMethod"
      - "ApiGatewayResponse"
    Properties:
      RestApiId: !Ref "ApiGateway"
      StageName: "dev"

  mfulambdarole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: !Join ["-",[!Ref AWS::StackName, "mfurole"]]

  mfuLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref mfulambdarole
      PolicyName: !Ref mfulambdarole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
            - "cloudwatch:PutMetricData"
            Resource: "*"
          - Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "iam:ListAttachedRolePolicies"
            - "iam:AttachRolePolicy"
            Resource: "*"
          - Effect: "Allow"
            Action:
            - "s3:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"     
            Resource: !Ref c1api

  MfuLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Handle Malicious File Upload Execution"
      Environment:
        Variables:
          API_KEY: !Ref c1api
          ENDPOINT: !Ref Endpoint
      Runtime: python3.7
      Handler: index.lambda_handler
      Layers:
        - !Ref LambdaLibLayer
      Role: !GetAtt
        - mfulambdarole
        - Arn
      Code:
        ZipFile: |
          import json
          import base64
          import email
          import time
          import boto3
          import os

          import amaas.grpc

          api_key = os.environ["API_KEY"]
          endpoint = os.environ["ENDPOINT"]

          def lambda_handler(event, context):
              # get secret
              secrets = boto3.client("secretsmanager").get_secret_value(SecretId=api_key)
              sm_data = json.loads(secrets["SecretString"])
              apikey = sm_data["c1apikey"]

              file_data = base64.b64decode(event["body"])
              try:
                  content_type = event["headers"]["Content-Type"]
              except:
                  content_type = event["headers"]["content-type"]

              ct = "Content-Type: " + content_type + "\n"

              msg = email.message_from_bytes(ct.encode() + file_data)

              print("Multipart check : ", msg.is_multipart())

              if msg.is_multipart():
                  multipart_content = {}
                  for part in msg.get_payload():
                      if part.get_filename():
                          file_name = part.get_filename()
                          print(file_name)
                      multipart_content[
                          part.get_param("name", header="content-disposition")
                      ] = part.get_payload(decode=True)

                      file_path = "/tmp/" + file_name
                      with open(file_path, "wb") as f:
                          f.write(multipart_content["filename"])
                  try:
                      handle = amaas.grpc.init(
                          endpoint,
                          apikey,
                          True,
                      )
                      s = time.perf_counter()
                      result = amaas.grpc.scan_file(file_path, handle)

                      elapsed = time.perf_counter() - s

                      print("Elapsed")
                      print(f"scan executed in {elapsed:0.2f} seconds.")

                      amaas.grpc.quit(handle)

                      print(result)

                      if json.loads(result)["scanResult"] == 0:
                          msg = "Clean file!"
                      else:
                          msg = "Infected file!"

                      return {
                          "statusCode": 200,
                          "headers": {"Access-Control-Allow-Origin": "*"},
                          "body": json.dumps(msg),
                      }
                  except Exception as e:
                      return {
                          "statusCode": 200,
                          "headers": {"Access-Control-Allow-Origin": "*"},
                          "body": json.dumps(str(e)),
                      }

      MemorySize: 512
      Timeout: 500
  
  mfuLambdaInvokeApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 
        - MfuLambdaFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/mfu"
  
  htmlLambdaFunction:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - "S3Bucket"
    Properties:
      Description: "create .html documents"
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket
          MFU_URL: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/mfu"
      Runtime: python3.7
      Handler: index.handler
      Code:
        ZipFile: |
          import boto3
          import os
          import cfnresponse
          mfu_url = os.environ["MFU_URL"]
          bucket_name = os.environ["BUCKET_NAME"]
          def handler(event, context):
              mfu_body = """<!DOCTYPE html>
              <html lang="en">
                  <head>
                      <meta charset="utf-8" />
                      <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
                      <meta name="description" content="" />
                      <meta name="author" content="" />
                      <title>Serverless Application - Malicious File Upload</title>
                      <!-- Favicon-->
                      <link rel="icon" type="image/x-icon" href="assets/favicon.ico" />
                      <!-- Bootstrap icons-->
                      <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet" />
                      <!-- Core theme CSS (includes Bootstrap)-->
                      <link href="css/styles.css" rel="stylesheet" />
                  </head>
                  <body>
                      <!-- Responsive navbar-->
                      <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
                          <div class="container px-5">
                              <a class="navbar-brand" href="index.html">Malicious File Upload Test</a>
                          </div>
                      </nav>
                      <!-- Header-->
                      <header>
                          <div class="container px-5">
                              <div class="row gx-5 justify-content-center">
                                  <div class="col-lg-10">
                                      <div class="text-center my-5">
                                          <div class="feature bg-danger bg-gradient text-white rounded-3 mb-3"><i class="bi bi-file-earmark-arrow-up"></i></div>
                                          <h2>Malicious File Upload</h2>
                                          <p>Unrestricted uploaded files can be a significant risk to an application downstream workflow. Any allowed AWS IAM Role or User with access to the object could potentially come into contact with the file</p>
                                          <p>For more information please see <a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload" target="_blank" style="color: cornflowerblue;">Owasp - File Upload</a></p>
                                      </div>
                                  </div>
                              </div>
                          </div>
                      </header>
                      <!-- MFU section-->
                      <section class="py-5" id="mfu">
                          <div class="container px-5 my-5">
                              <div class="row gx-5">
                                  <div class="col-lg-6">
                                      <div class="card">
                                          <div class="card-body">
                                              <h4>1. Get a Malicious File </h4>
                                              <p>Navigate to <a href="https://www.eicar.org" target="_blank" style="color: cornflowerblue;">Eicar.org</a> and download the sample malware test file</p>
                                          </div>
                                      </div>
                                  </div>
                                  <div class="col-lg-6">
                                      <div class="card">
                                          <div class="card-body">
                                              <h4>2. Upload the Malicious File </h4>
                                              <form id="myFormId" enctype="multipart/form-data">
                                                  <div class="input-group">
                                                      <input type="file" class="form-control" id="myFile" name="filename" aria-describedby="inputGroupFile" aria-label="Upload">
                                                      <button class="btn btn-outline-danger" type="button" id="btn_inputGroupFile" onclick="sendFile()">Submit</button>
                                                  </div>
                                              </form>
                                          </div>
                                      </div>
                                  </div>
                              </div>
                          </div>
                      </section>
                      <!-- Footer-->
                      <!-- <footer class="footer py-3 bg-dark fixed-bottom" style="margin-bottom: 0%;">
                          <div class="container px-5">
                              <p class="m-0 text-center text-white">Serverless Application 2021</p>
                          </div>
                      </footer> -->
                      <!-- Bootstrap core JS-->
                      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"></script>
                      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
                      <script>
                          function sendFile() {
                              var formData = new FormData();
                              jQuery.each(jQuery('#myFile')[0].files, function(i, file) {
                                  formData.append('filename', file);
                              });
                              $.ajax({
                                  accepts: "*",
                                  url: """
                                  
              mfu2 = """,
              method: 'POST',
                                  contentType: false,
                                  data: formData,
                                  crossDomain: true,
                                  processData: false,
                                  success: function (data) {
                                      console.log(data);
                                      $("#response-text").html(data);
                                      $("#response-modal").modal('show');
                                  },
                                  error: function (request, status, error) {
                                      console.log(request);
                                      $("#response-text").html(request.responseText);
                                      $("#response-modal").modal('show');
                                  }
                              });
                          };
                      
                      </script>
                  </body>
                  <div class="modal" id="response-modal" tabindex="-1" role="dialog" aria-hidden="true">
                      <div class="modal-dialog modal-md">
                        <div class="modal-content">
                          <div class="modal-header">
                              <h4 class="modal-title" id="myModalLabel"> Response </h4>
                              <button type="button" class="btn btn-danger btn-simple" data-bs-dismiss="modal">&times;</button>
                          </div>
                          <div class="modal-body" id="response-text">
                            
                          </div>
                      </div>
                      </div>
                  </div>
              </html>
              """

              s3 = boto3.client('s3')
              responseValue = event['RequestType']
              responseData = {}
              responseData['Data'] = responseValue
              
              if responseValue == "Create":
                mfubody = (mfu_body + f'"{mfu_url}"'+ mfu2)
                mfu_html = "index.html"
                uploadmfu = s3.put_object(Body=mfubody, Bucket=bucket_name, Key=mfu_html, ContentType='text/html', ACL='public-read')

                s3_res = boto3.resource('s3')
                                    
                copy_css = {
                    'Bucket': 'public-vuln-serverless-site',
                    'Key': 'css/styles.css'
                }
                s3_res.meta.client.copy(copy_css, bucket_name, 'css/styles.css', ExtraArgs={'ACL': 'public-read'})
                              
                copy_favi = {
                    'Bucket': 'public-vuln-serverless-site',
                    'Key': 'assets/favicon.ico'
                }
                s3_res.meta.client.copy(copy_favi, bucket_name, 'assets/favicon.ico', ExtraArgs={'ACL': 'public-read'})

              else:
                 resource_s3 = boto3.resource('s3')
                 bucket = resource_s3.Bucket(bucket_name)
                 bucket.objects.all().delete()
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              
      MemorySize: 512
      Timeout: 200
      Role: !GetAtt "htmllambdarole.Arn"
  
  htmllambdarole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
      Policies:
      - PolicyName: !Join ["-",[!Ref AWS::StackName, "htmlpolicy"]]
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "cloudwatch:PutMetricData"
            Resource: "*"
          - Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "iam:ListAttachedRolePolicies"
            - "iam:AttachRolePolicy"
            - "s3:*"
            Resource: "*"

  primerinvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - "htmlLambdaFunction"
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt htmlLambdaFunction.Arn
      FunctionName: !Ref htmlLambdaFunction

Outputs:
  WebsiteURL:
    Value: !GetAtt 
      - S3Bucket
      - WebsiteURL
    Description: URL for website hosted on S3
  MFUApiGatewayInvokeURL:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/mfu"
    Description: MFU apigateway url
